import React, { useState, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { 
  Select, 
  SelectContent, 
  SelectGroup, 
  SelectItem, 
  SelectLabel, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { RefreshCw, Wifi, WifiOff } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useMarketData } from '@/hooks/useMarketData';
import { useMarketDataWebSocket } from '@/hooks/useMarketDataWebSocket';
import Header from '@/components/Header';
import LightweightCandlestickChart from '@/components/charts/LightweightCandlestickChart';

// Available timeframes for the chart
const AVAILABLE_TIMEFRAMES = [
  { value: '1m', label: '1 Minute' },
  { value: '5m', label: '5 Minutes' },
  { value: '15m', label: '15 Minutes' },
  { value: '30m', label: '30 Minutes' },
  { value: '1h', label: '1 Hour' },
  { value: '4h', label: '4 Hours' },
  { value: '1d', label: '1 Day' },
  { value: '1wk', label: '1 Week' },
  { value: '1mo', label: '1 Month' }
];

// Pre-populated symbols for easy selection
const AVAILABLE_SYMBOLS = [
  // Indian Indices
  { value: 'INDEX:NIFTY50', label: 'NIFTY 50' },
  { value: 'INDEX:BANKNIFTY', label: 'NIFTY BANK' },
  { value: 'INDEX:FINNIFTY', label: 'NIFTY FIN SERVICE' },
  { value: 'INDEX:SENSEX', label: 'BSE SENSEX' },
  
  // Indian Stocks
  { value: 'NSE:RELIANCE', label: 'Reliance Industries' },
  { value: 'NSE:TCS', label: 'Tata Consultancy Services' },
  { value: 'NSE:HDFCBANK', label: 'HDFC Bank' },
  { value: 'NSE:INFY', label: 'Infosys' },
  { value: 'NSE:ICICIBANK', label: 'ICICI Bank' },
  { value: 'NSE:HINDUNILVR', label: 'Hindustan Unilever' },
  
  // US Stocks
  { value: 'NASDAQ:AAPL', label: 'Apple Inc.' },
  { value: 'NASDAQ:MSFT', label: 'Microsoft' },
  { value: 'NASDAQ:GOOGL', label: 'Alphabet (Google)' },
  { value: 'NASDAQ:AMZN', label: 'Amazon' },
  { value: 'NYSE:TSLA', label: 'Tesla' },
  
  // Forex Pairs
  { value: 'FOREX:USDINR', label: 'USD/INR' },
  { value: 'FOREX:EURINR', label: 'EUR/INR' },
  { value: 'FOREX:GBPINR', label: 'GBP/INR' },
  
  // Crypto
  { value: 'CRYPTO:BTCUSDT', label: 'Bitcoin/USDT' },
  { value: 'CRYPTO:ETHUSDT', label: 'Ethereum/USDT' }
];

// Define indicator data structure for chart
interface ChartIndicator {
  type: string;
  period: number;
  color: string;
  data: { time: string; value: number }[];
}

// Format symbol name for display in chart title
function formatSymbolName(symbol: string): string {
  if (symbol.includes(':')) {
    const parts = symbol.split(':');
    const exchange = parts[0];
    const ticker = parts[1];
    
    switch (exchange) {
      case 'INDEX':
        return `${ticker} Index`;
      case 'NSE':
        return `${ticker} (NSE)`;
      case 'NASDAQ':
        return `${ticker} (NASDAQ)`;
      case 'NYSE':
        return `${ticker} (NYSE)`;
      case 'FOREX':
        return ticker;
      case 'CRYPTO':
        return ticker;
      default:
        return symbol;
    }
  }
  return symbol;
}

const Charts: React.FC = () => {
  const { toast } = useToast();
  
  // State for symbol and timeframe selection
  const [symbol, setSymbol] = useState('INDEX:NIFTY50');
  const [timeframe, setTimeframe] = useState('1d');
  
  // State for real-time data
  const [realtimeEnabled, setRealtimeEnabled] = useState(false);
  
  // Fetch market data using custom hook
  const {
    data: marketData,
    isLoading,
    refetch
  } = useMarketData(symbol, timeframe);
  
  // Initialize WebSocket connection for real-time updates
  const {
    connect,
    disconnect,
    isConnected,
    latestPrice,
    error: wsError
  } = useMarketDataWebSocket({
    symbol,
    onConnect: () => {
      toast({
        title: "WebSocket Connected",
        description: "You are now receiving real-time market data",
      });
    },
    onDisconnect: () => {
      toast({
        title: "WebSocket Disconnected",
        description: "Real-time updates have been disabled",
      });
    },
    onError: (error) => {
      toast({
        title: "WebSocket Error",
        description: error.message,
        variant: "destructive"
      });
    }
  });
  
  // Handle refresh button click
  const handleRefresh = useCallback(() => {
    refetch();
    toast({
      title: "Data refreshed",
      description: `Updated data for ${formatSymbolName(symbol)}`,
    });
  }, [refetch, symbol, toast]);
  
  // Default indicators for the chart
  const indicatorsData: ChartIndicator[] = [
    {
      type: 'sma',
      period: 20,
      color: '#3182CE',
      data: []
    },
    {
      type: 'sma',
      period: 50,
      color: '#805AD5',
      data: []
    }
  ];
  
  // Prepare display data with fallback
  const displayData = marketData ? 
    marketData.map(item => ({
      time: new Date(item.timestamp).toISOString(),
      open: parseFloat(item.open),
      high: parseFloat(item.high),
      low: parseFloat(item.low),
      close: parseFloat(item.close),
      volume: item.volume ? parseFloat(item.volume) : 0
    })) : 
    [];
    
  // Cleanup WebSocket connection on unmount
  useEffect(() => {
    return () => {
      disconnect();
    };
  }, [disconnect]);
  
  // Update the WebSocket subscription when symbol changes
  useEffect(() => {
    if (realtimeEnabled) {
      disconnect();
      connect();
    }
  }, [symbol, connect, disconnect, realtimeEnabled]);
  
  // Append real-time data to chart if available
  useEffect(() => {
    if (latestPrice && displayData.length > 0 && realtimeEnabled) {
      const lastBar = displayData[displayData.length - 1];
      const lastTime = new Date(lastBar.time).getTime();
      const currentTime = new Date().getTime();
      
      // Only update if we have a significant time difference (based on timeframe)
      const timeframeInMs = getTimeframeInMs(timeframe);
      if (currentTime - lastTime >= timeframeInMs) {
        // Should append new bar, but for simplicity, we just show a notification
        toast({
          title: "New Price Data",
          description: `Latest price: ${latestPrice}`,
        });
      }
    }
  }, [latestPrice, displayData, realtimeEnabled, timeframe, toast]);
  
  // Helper to convert timeframe to milliseconds
  function getTimeframeInMs(timeframe: string): number {
    switch (timeframe) {
      case '1m': return 60 * 1000;
      case '5m': return 5 * 60 * 1000;
      case '15m': return 15 * 60 * 1000;
      case '30m': return 30 * 60 * 1000;
      case '1h': return 60 * 60 * 1000;
      case '4h': return 4 * 60 * 60 * 1000;
      case '1d': return 24 * 60 * 60 * 1000;
      case '1wk': return 7 * 24 * 60 * 60 * 1000;
      case '1mo': return 30 * 24 * 60 * 60 * 1000;
      default: return 24 * 60 * 60 * 1000; // Default to daily
    }
  }
  
  // Update market data when selections change
  useEffect(() => {
    refetch();
  }, [symbol, timeframe, refetch]);
  
  return (
    <div className="py-6 px-4 sm:px-6 lg:px-8 mt-14 lg:mt-0">
      <Header 
        title="Charts"
        description="Visualize market data and analyze price movements"
      />
      
      {/* Chart Controls */}
      <div className="bg-white shadow rounded-lg overflow-hidden mb-8">
        <div className="p-4 border-b border-neutral-200">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-neutral-700 mb-1">Symbol</label>
              <Select value={symbol} onValueChange={setSymbol}>
                <SelectTrigger>
                  <SelectValue placeholder="Select a symbol" />
                </SelectTrigger>
                <SelectContent>
                  <SelectGroup>
                    <SelectLabel>Indian Indices</SelectLabel>
                    {AVAILABLE_SYMBOLS.filter(s => s.value.startsWith('INDEX:')).map(s => (
                      <SelectItem key={s.value} value={s.value}>{s.label}</SelectItem>
                    ))}
                  </SelectGroup>
                  <SelectGroup>
                    <SelectLabel>Indian Stocks</SelectLabel>
                    {AVAILABLE_SYMBOLS.filter(s => s.value.startsWith('NSE:')).map(s => (
                      <SelectItem key={s.value} value={s.value}>{s.label}</SelectItem>
                    ))}
                  </SelectGroup>
                  <SelectGroup>
                    <SelectLabel>US Stocks & ETFs</SelectLabel>
                    {AVAILABLE_SYMBOLS.filter(s => s.value.startsWith('NASDAQ:') || s.value.startsWith('NYSE:')).map(s => (
                      <SelectItem key={s.value} value={s.value}>{s.label}</SelectItem>
                    ))}
                  </SelectGroup>
                  <SelectGroup>
                    <SelectLabel>Forex</SelectLabel>
                    {AVAILABLE_SYMBOLS.filter(s => s.value.startsWith('FOREX:')).map(s => (
                      <SelectItem key={s.value} value={s.value}>{s.label}</SelectItem>
                    ))}
                  </SelectGroup>
                  <SelectGroup>
                    <SelectLabel>Crypto</SelectLabel>
                    {AVAILABLE_SYMBOLS.filter(s => s.value.startsWith('CRYPTO:')).map(s => (
                      <SelectItem key={s.value} value={s.value}>{s.label}</SelectItem>
                    ))}
                  </SelectGroup>
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-neutral-700 mb-1">Timeframe</label>
              <Select value={timeframe} onValueChange={setTimeframe}>
                <SelectTrigger>
                  <SelectValue placeholder="Select timeframe" />
                </SelectTrigger>
                <SelectContent>
                  {AVAILABLE_TIMEFRAMES.map(t => (
                    <SelectItem key={t.value} value={t.value}>{t.label}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="flex items-end">
              <Button onClick={handleRefresh}>
                <RefreshCw className="w-4 h-4 mr-2" />
                Refresh Data
              </Button>
            </div>
          </div>
        </div>
        
        {/* Chart Display */}
        <div className="p-0">
          {isLoading ? (
            <div className="flex justify-center items-center p-8">
              <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full"></div>
            </div>
          ) : displayData.length > 0 ? (
            <div className="p-4">
              <LightweightCandlestickChart
                data={displayData}
                height={500}
                showVolume={true}
                symbol={formatSymbolName(symbol)}
                timeframe={timeframe}
                indicators={indicatorsData}
              />
            </div>
          ) : (
            <div className="flex flex-col items-center justify-center p-8">
              <p className="text-neutral-500">No data available for the selected symbol and timeframe</p>
              <Button className="mt-4" onClick={handleRefresh}>
                <RefreshCw className="w-4 h-4 mr-2" />
                Refresh
              </Button>
            </div>
          )}
        </div>
        
        {/* Real-time WebSocket Controls */}
        <div className="p-4 border-t border-neutral-200">
          <div className="flex items-center gap-4">
            <div>
              <label className="inline-flex items-center gap-2">
                <Switch
                  checked={realtimeEnabled}
                  onCheckedChange={(checked) => {
                    setRealtimeEnabled(checked);
                    if (checked) {
                      toast({
                        title: "Real-time updates enabled",
                        description: "Chart will update as new data arrives",
                      });
                      connect();
                    } else {
                      toast({
                        title: "Real-time updates disabled",
                        description: "Chart will only update when manually refreshed",
                      });
                      disconnect();
                    }
                  }}
                />
                <span>Enable real-time market data updates</span>
              </label>
            </div>
            <div className="flex items-center">
              {isConnected ? (
                <>
                  <Wifi className="h-5 w-5 text-green-500 mr-2" />
                  <span className="text-green-600">Connected</span>
                </>
              ) : (
                <>
                  <WifiOff className="h-5 w-5 text-neutral-400 mr-2" />
                  <span className="text-neutral-500">Disconnected</span>
                </>
              )}
            </div>
          </div>
          {wsError && (
            <p className="text-sm text-red-500 mt-2">
              Error: {wsError}
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

export default Charts;